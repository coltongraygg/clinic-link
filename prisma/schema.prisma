// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum SupervisorRole {
    ADMIN
    USER
}

enum RequestStatus {
    PENDING
    PARTIAL_COVERED
    FULLY_COVERED
    COMPLETE
}

enum NotificationType {
    NEW_REQUEST
    SESSION_CLAIMED
    REQUEST_COVERED
    UPCOMING_UNCOVERED
}

model TimeOffRequest {
    id            String        @id @default(cuid())
    supervisorId  String
    startDate     DateTime
    endDate       DateTime
    status        RequestStatus @default(PENDING)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    supervisor     User            @relation("RequestedTimeOff", fields: [supervisorId], references: [id])
    clinicSessions ClinicSession[]

    @@index([supervisorId])
    @@index([startDate, endDate])
}

model ClinicSession {
    id                    String    @id @default(cuid())
    requestId             String
    clinicName            String
    date                  DateTime
    startTime             DateTime
    endTime               DateTime
    notes                 String?
    coveredBySupervisorId String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    request         TimeOffRequest    @relation(fields: [requestId], references: [id], onDelete: Cascade)
    coveredBy       User?             @relation("CoveredSessions", fields: [coveredBySupervisorId], references: [id])
    coverageHistory SessionCoverage[]

    @@index([requestId])
    @@index([coveredBySupervisorId])
    @@index([date])
    @@index([clinicName])
}

model SessionCoverage {
    id           String   @id @default(cuid())
    sessionId    String
    supervisorId String
    action       String   // "CLAIMED" or "RELEASED"
    timestamp    DateTime @default(now())

    session    ClinicSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    supervisor User          @relation("CoverageActions", fields: [supervisorId], references: [id])

    @@index([sessionId])
    @@index([supervisorId])
}

model Notification {
    id         String           @id @default(cuid())
    userId     String
    type       NotificationType
    title      String
    message    String
    data       Json?            // Additional context data
    read       Boolean          @default(false)
    createdAt  DateTime         @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId, read])
    @@index([createdAt])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    role          SupervisorRole  @default(USER)
    isActive      Boolean         @default(true)

    accounts         Account[]
    sessions         Session[]
    timeOffRequests  TimeOffRequest[] @relation("RequestedTimeOff")
    coveredSessions  ClinicSession[]  @relation("CoveredSessions")
    coverageActions  SessionCoverage[] @relation("CoverageActions")
    notifications    Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
